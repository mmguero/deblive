#!/bin/bash

function git_latest_release () {
  if [ "$1" ]; then
    (set -o pipefail && curl -sL -f "https://api.github.com/repos/$1/releases/latest" | jq '.tag_name' | sed -e 's/^"//' -e 's/"$//' ) || \
      (set -o pipefail && curl -sL -f "https://api.github.com/repos/$1/releases" | jq '.[0].tag_name' | sed -e 's/^"//' -e 's/"$//' ) || \
      echo unknown
  else
    echo "unknown">&2
  fi
}

CAPA_VERSION="1.6.0"
CAPA_URL="https://github.com/fireeye/capa/releases/download/v${CAPA_VERSION}/capa-v${CAPA_VERSION}-linux.zip"
CAPA_DIR="/usr/local/bin"
CAPA_BIN="${CAPA_DIR}/capa"

YARA_RULES_URL="https://codeload.github.com/Neo23x0/signature-base/tar.gz/master"
YARA_RULES_DIR="/opt/yara-rules"

OPENRESOLV_VER="3.12.0"
OPENRESOLV_URL="https://roy.marples.name/downloads/openresolv/openresolv-$OPENRESOLV_VER.tar.xz"

RESPONDER_VER="3.0.3.0"
RESPONDER_URL="https://github.com/lgandx/Responder/archive/v${RESPONDER_VER}.tar.gz"

BURPSUITE_VER="2021.2.1"
BURPSUITE_URL="https://portswigger.net/burp/releases/download?product=community&version=${BURPSUITE_VER}&type=jar"

BRUTESHARK_URL="https://github.com/odedshimon/BruteShark/releases/latest/download/BruteSharkCli"

CHEPY_PLUGINS_URL="https://codeload.github.com/securisec/chepy_plugins/tar.gz/master"
CHEPY_PLUGINS_DIR="/opt/chepy-plugins"

GHIDRA_URL="https://ghidra-sre.org/ghidra_9.2.2_PUBLIC_20201229.zip"
SYNERGY_URL="https://filedn.com/lqGgqyaOApSjKzN216iPGQf/Software/Linux/synergy_debian_amd64.deb"
PCLOUD_URL="https://filedn.com/lqGgqyaOApSjKzN216iPGQf/Software/Linux/pcloud"
UDPTUNNEL_URL="https://codeload.github.com/rfc1036/udptunnel/tar.gz/master"

# capa
cd /tmp
rm -rf /tmp/capa*
curl -fsSL -o ./capa.zip "${CAPA_URL}"
unzip ./capa.zip
chmod 755 ./capa
mkdir -p "${CAPA_DIR}"
mv ./capa "${CAPA_BIN}"
rm -rf /tmp/capa*
###

# yara rules
cd /tmp
mkdir -p ./Neo23x0
curl -sSL "$YARA_RULES_URL" | tar xzvf - -C ./Neo23x0 --strip-components 1
mkdir -p "${YARA_RULES_DIR}"/custom
cp ./Neo23x0/yara/* ./Neo23x0/vendor/yara/* "${YARA_RULES_DIR}"/
cp ./Neo23x0/LICENSE "${YARA_RULES_DIR}"/_LICENSE
rm -rf /tmp/Neo23x0
###

# chepy plugins
mkdir -p "$CHEPY_PLUGINS_DIR"
cd "$(dirname "$CHEPY_PLUGINS_DIR")"
curl -sSL "$CHEPY_PLUGINS_URL" | tar xzvf - -C "$(basename "$CHEPY_PLUGINS_DIR")" --strip-components 1
rm -rf "$CHEPY_PLUGINS_DIR"/{tests,docs}
###


# update clamav signatures
freshclam --stdout --quiet --no-warnings
###

# Install openresolv (version in buster repos is out of date)
curl -L -o "openresolv-$OPENRESOLV_VER.tar.xz" "$OPENRESOLV_URL"
tar xvf "openresolv-$OPENRESOLV_VER.tar.xz"
cd "openresolv-$OPENRESOLV_VER"/
./configure --prefix=/
make
# make install
checkinstall -y -D --strip=yes --stripso=yes --install=yes --fstrans=no --pkgname="openresolv" --pkgversion="$OPENRESOLV_VER" --pkgarch="amd64" --pkgsource="$OPENRESOLV_URL"
cd ../
rm -rf "openresolv-$OPENRESOLV_VER.tar.xz" "openresolv-$OPENRESOLV_VER"
###

# Install responder.py
curl -L -o "Responder-${RESPONDER_VER}.tar.gz" "$RESPONDER_URL"
tar -xvzf Responder-${RESPONDER_VER}.tar.gz
mv ./Responder-${RESPONDER_VER} /opt/responder
rm -Rf Responder-${RESPONDER_VER}.tar.gz
ln -s /opt/responder/Responder.py /usr/local/bin/Responder.py
###

# update freshclam
systemctl status clamav-freshclam && systemctl stop clamav-freshclam
freshclam --stdout --quiet --no-warnings --foreground=true

# burpsuite
mkdir -p /opt/burpsuite
curl -L -o "/opt/burpsuite/burpsuite_community_v${BURPSUITE_VER}.jar" "$BURPSUITE_URL"

# BruteShark
# Create a symbolic link between libpcap.so and the actual libpcap file (e.g. libpcap.so.0.8)
find /usr/lib/x86_64-linux-gnu -type f -name "libpcap.so.*" | head -1 | xargs -i ln -s -r "{}" /usr/lib/x86_64-linux-gnu/libpcap.so
curl -L -o /usr/local/bin/BruteSharkCli "$BRUTESHARK_URL"
chmod 755 /usr/local/bin/BruteSharkCli

# ghidra (commented out for now because it's huge)
# curl -L -o "/tmp/ghidra.zip" "$GHIDRA_URL"
# unzip "/tmp/ghidra.zip" -d "/opt"
# rm -f "/tmp/ghidra.zip"

# synergy
curl -L -o "/tmp/synergy_debian_amd64.deb" "$SYNERGY_URL"
dpkg -i "/tmp/synergy_debian_amd64.deb"
rm -f "/tmp/synergy_debian_amd64.deb"

# croc
CROC_RELEASE="$(git_latest_release schollz/croc | sed 's/^v//')"
TMP_CLONE_DIR="$(mktemp -d)"
curl -L "https://github.com/schollz/croc/releases/download/v${CROC_RELEASE}/croc_${CROC_RELEASE}_Linux-64bit.tar.gz" | tar xzf - -C "${TMP_CLONE_DIR}"
cp -f "${TMP_CLONE_DIR}"/croc /usr/local/bin/croc
cp -f "${TMP_CLONE_DIR}"/bash_autocomplete /etc/bash_completion.d/croc.bash
chmod 755 /usr/local/bin/croc
rm -rf "$TMP_CLONE_DIR"

# gron
GRON_RELEASE="$(git_latest_release tomnomnom/gron | sed 's/^v//')"
TMP_CLONE_DIR="$(mktemp -d)"
curl -L "https://github.com/tomnomnom/gron/releases/download/v${GRON_RELEASE}/gron-linux-amd64-${GRON_RELEASE}.tgz" | tar xzf - -C "${TMP_CLONE_DIR}"
cp -f "${TMP_CLONE_DIR}"/gron /usr/local/bin/gron
chmod 755 /usr/local/bin/gron
rm -rf "$TMP_CLONE_DIR"

# sq
SQ_RELEASE="$(git_latest_release neilotoole/sq | sed 's/^v//')"
TMP_CLONE_DIR="$(mktemp -d)"
curl -L "https://github.com/neilotoole/sq/releases/download/v${SQ_RELEASE}/sq-linux-amd64.tar.gz" | tar xzf - -C "${TMP_CLONE_DIR}"
cp -f "${TMP_CLONE_DIR}"/sq /usr/local/bin/sq
chmod 755 /usr/local/bin/sq
rm -rf "$TMP_CLONE_DIR"

# step-cli
STEPCLI_RELEASE="$(git_latest_release smallstep/cli | sed 's/^v//')"
TMP_CLONE_DIR="$(mktemp -d)"
curl -L "https://github.com/smallstep/cli/releases/download/v${STEPCLI_RELEASE}/step_linux_${STEPCLI_RELEASE}_amd64.tar.gz" | tar xzf - -C "${TMP_CLONE_DIR}" --strip-components 1
cp -f "${TMP_CLONE_DIR}"/bin/step /usr/local/bin/step
cp -f "${TMP_CLONE_DIR}"/autocomplete/bash_autocomplete /etc/bash_completion.d/step.bash
chmod 755 /usr/local/bin/step
rm -rf "$TMP_CLONE_DIR"

# ripgrep
RIPGREP_RELEASE="$(git_latest_release BurntSushi/ripgrep | sed 's/^v//')"
TMP_CLONE_DIR="$(mktemp -d)"
RIPGREP_URL="https://github.com/BurntSushi/ripgrep/releases/download/${RIPGREP_RELEASE}/ripgrep-${RIPGREP_RELEASE}-x86_64-unknown-linux-musl.tar.gz"
curl -L "${RIPGREP_URL}" | tar xvzf - -C "${TMP_CLONE_DIR}" --strip-components 1
cp -f "${TMP_CLONE_DIR}"/rg /usr/local/bin/rg
cp -f "${TMP_CLONE_DIR}"/complete/rg.bash /etc/bash_completion.d/rg.bash
chmod 755 /usr/local/bin/rg
rm -rf "$TMP_CLONE_DIR"

# bat
BAT_RELEASE="$(git_latest_release sharkdp/bat | sed 's/^v//')"
TMP_CLONE_DIR="$(mktemp -d)"
BAT_URL="https://github.com/sharkdp/bat/releases/download/v${BAT_RELEASE}/bat-v${BAT_RELEASE}-x86_64-unknown-linux-gnu.tar.gz"
curl -L "${BAT_URL}" | tar xvzf - -C "${TMP_CLONE_DIR}" --strip-components 1
cp -f "${TMP_CLONE_DIR}"/bat /usr/local/bin/bat
chmod 755 /usr/local/bin/bat
rm -rf "$TMP_CLONE_DIR"

# fd
FD_RELEASE="$(git_latest_release sharkdp/fd | sed 's/^v//')"
TMP_CLONE_DIR="$(mktemp -d)"
FD_URL="https://github.com/sharkdp/fd/releases/download/v${FD_RELEASE}/fd-v${FD_RELEASE}-x86_64-unknown-linux-gnu.tar.gz"
curl -L "${FD_URL}" | tar xvzf - -C "${TMP_CLONE_DIR}" --strip-components 1
cp -f "${TMP_CLONE_DIR}"/fd /usr/local/bin/fd
chmod 755 /usr/local/bin/fd
rm -rf "$TMP_CLONE_DIR"

# watchexec
WATCHEXEC_RELEASE="$(git_latest_release watchexec/watchexec | sed 's/^cli-v//')"
TMP_CLONE_DIR="$(mktemp -d)"
WATCHEXEC_URL="https://github.com/watchexec/watchexec/releases/download/cli-v${WATCHEXEC_RELEASE}/watchexec-${WATCHEXEC_RELEASE}-x86_64-unknown-linux-gnu.tar.xz"
curl -L "${WATCHEXEC_URL}" | xz -d | tar xvf - -C "${TMP_CLONE_DIR}" --strip-components 1
cp -f "${TMP_CLONE_DIR}"/watchexec /usr/local/bin/watchexec
chmod 755 /usr/local/bin/watchexec
rm -rf "$TMP_CLONE_DIR"

# termshark (commented out because for now I'm including wireshark)
# TERMSHARK_RELEASE="$(git_latest_release gcla/termshark | sed 's/^v//')"
# TMP_CLONE_DIR="$(mktemp -d)"
# curl -L "https://github.com/gcla/termshark/releases/download/v${TERMSHARK_RELEASE}/termshark_${TERMSHARK_RELEASE}_linux_x64.tar.gz" | tar xzf - -C "${TMP_CLONE_DIR}"
# cp -f "${TMP_CLONE_DIR}/termshark_${TERMSHARK_RELEASE}_linux_x64"/termshark/usr/local/bin/termshark
# chmod 755 /usr/local/bin/termshark
# rm -rf "$TMP_CLONE_DIR"

# pcloud
curl -L -o "/usr/local/bin/pcloud" "$PCLOUD_URL"
chmod 755 "/usr/local/bin/pcloud"

# udptunnel
curl -L -o "/tmp/udptunnel.tar.gz" "$UDPTUNNEL_URL"
cd /tmp
mkdir udptunnel
tar xvf ./udptunnel.tar.gz -C ./udptunnel --strip-components 1
cd ./udptunnel
make
make install
cd /tmp
rm -rf /tmp/udptunnel*

# bpytop
git clone --recursive --depth 1 --single-branch -b master https://github.com/aristocratos/bpytop /usr/local/bin/bpytop
ln -vrs /usr/local/bin/bpytop/bpytop.py /usr/local/bin/btop

# veracrypt
curl -L -o "/tmp/veracrypt-console-Debian-10-amd64.deb" "$(curl -sSL https://www.veracrypt.fr/en/Downloads.html | grep -Pio 'https://.+?veracrypt-console.+?Debian-10-amd64.deb' | sed "s/&#43;/+/" | head -n 1)"
dpkg -i "/tmp/veracrypt-console-Debian-10-amd64.deb"
rm -f "/tmp/veracrypt-console-Debian-10-amd64.deb"

# x11docker
curl -fsSL https://raw.githubusercontent.com/mviereck/x11docker/master/x11docker | bash -s -- --update

# some fonts
LATEST_NERDFONT_RELEASE="$(git_latest_release ryanoasis/nerd-fonts)"
mkdir -p /usr/local/share/fonts
pushd /usr/local/share/fonts >/dev/null 2>&1
for NERDFONT in DejaVuSansMono FiraCode FiraMono Hack Incosolata LiberationMono SourceCodePro Ubuntu UbuntuMono; do
  curl -L -o ./$NERDFONT.zip "https://github.com/ryanoasis/nerd-fonts/releases/download/$LATEST_NERDFONT_RELEASE/$NERDFONT.zip"
  unzip -o ./$NERDFONT.zip
done
popd >/dev/null 2>&1
rm -f /usr/local/share/fonts/*Nerd*Windows*.ttf /usr/local/share/fonts/*.zip /usr/local/share/fonts/*Nerd*.otf
chmod 755 /usr/local/share/fonts
chmod 644 /usr/local/share/fonts/*.*
fc-cache -f -v

# set up capabilities for network-related tools
EXE_LESS_CAP=(
  /sbin/ethtool
  /usr/bin/dumpcap
  /usr/bin/ncat
  /usr/bin/openssl
  /usr/bin/socat
  /usr/bin/stunnel3
  /usr/bin/stunnel4
  /usr/bin/tcpcryptd
  /usr/bin/tcpflow
  /usr/bin/tcpreplay
  /usr/local/sbin/udptunnel
  /usr/sbin/arpspoof
  /usr/sbin/dnsspoof
  /usr/sbin/dsniff
  /usr/sbin/filesnarf
  /usr/sbin/macof
  /usr/sbin/mailsnarf
  /usr/sbin/msgsnarf
  /usr/sbin/nethogs
  /usr/sbin/sshmitm
  /usr/sbin/sshow
  /usr/sbin/tcpd
  /usr/sbin/tcpdump
  /usr/sbin/tcpkill
  /usr/sbin/tcpnice
  /usr/sbin/urlsnarf
  /usr/sbin/webmitm
  /usr/sbin/webspy
)
EXE_MORE_CAP=(
  /usr/sbin/astraceroute
  /usr/sbin/bpfc
  /usr/sbin/curvetun
  /usr/sbin/flowtop
  /usr/sbin/ifpps
  /usr/sbin/inetd
  /usr/sbin/mausezahn
  /usr/sbin/netsniff-ng
  /usr/sbin/stenotype
  /usr/sbin/trafgen
)
for i in ${EXE_LESS_CAP[@]}; do
  if [[ -e "$i" ]]; then
    $SUDO_CMD chown root:netdev "$i" && \
      $SUDO_CMD setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip CAP_NET_BIND_SERVICE+eip' "$i"
  fi
done
for i in ${EXE_MORE_CAP[@]}; do
  if [[ -e "$i" ]]; then
    $SUDO_CMD chown root:netdev "$i" && \
      $SUDO_CMD setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip CAP_NET_BIND_SERVICE+eip CAP_IPC_LOCK+eip CAP_SYS_ADMIN+eip' "$i"
  fi
done

###