#!/bin/bash

[[ -z "$GITHUB_OAUTH_TOKEN" ]] && [[ -n "$GITHUB_TOKEN" ]] && export GITHUB_OAUTH_TOKEN="$GITHUB_TOKEN"

# fetch will be used to download other release/tag assets from GitHub
cd /tmp
FETCH_URL="https://github.com/gruntwork-io/fetch/releases/latest/download/fetch_linux_amd64"
FETCH_ALT_URL="https://filedn.com/lqGgqyaOApSjKzN216iPGQf/Software/Linux/fetch_linux_amd64"
curl -fsSL -o /tmp/fetch "$FETCH_URL"
chmod 755 /tmp/fetch
if /tmp/fetch --version >/dev/null 2>&1; then
  cp -f /tmp/fetch /usr/local/bin/fetch
elif [[ -n "$FETCH_ALT_URL" ]]; then
  curl -fsSL -o /usr/local/bin/fetch "$FETCH_URL"
  chmod 755 /usr/local/bin/fetch
fi
rm -rf /tmp/fetch

ASSETS=(
  "https://github.com/aptible/supercronic|^supercronic-linux-amd64$|/usr/bin/supercronic|755"
  "https://github.com/boringproxy/boringproxy|^boringproxy-linux-x86_64$|/usr/bin/boringproxy|755"
  "https://github.com/BurntSushi/ripgrep|^ripgrep-.+-x86_64-unknown-linux-musl\.tar\.gz$|/tmp/ripgrep.tar.gz"
  "https://github.com/docker/docker-credential-helpers|^docker-credential-pass-v.+\.linux-amd64$|/usr/local/bin/docker-credential-pass|755"
  "https://github.com/docker/docker-credential-helpers|^docker-credential-secretservice-v.+\.linux-amd64$|/usr/local/bin/docker-credential-secretservice|755"
  "https://github.com/FiloSottile/age|^age-v.+-linux-amd64\.tar\.gz$|/tmp/age\.tar\.gz"
  "https://github.com/gabrie30/ghorg|^ghorg_.+_Linux_x86_64\.tar\.gz$|/tmp/ghorg\.tar\.gz"
  "https://github.com/jez/as-tree|^as-tree-.+-linux\.zip$|/tmp/as-tree\.zip"
  "https://github.com/LINBIT/virter|^virter-linux-amd64$|/usr/local/bin/virter|755"
  "https://github.com/LINBIT/vmshed|^vmshed-linux-amd64$|/usr/local/bin/vmshed|755"
  "https://github.com/mikefarah/yq|^yq_linux_amd64$|/usr/bin/yq|755"
  "https://github.com/neilotoole/sq|^sq-.+-linux-amd64\.tar\.gz$|/tmp/sq\.tar\.gz"
  "https://github.com/nektos/act|^act_Linux_x86_64\.tar\.gz$|/tmp/act\.tar\.gz"
  "https://github.com/ogham/exa|^exa-linux-x86_64-v.+\.zip$|/tmp/exa\.zip"
  "https://github.com/peco/peco|^peco_linux_amd64\.tar\.gz$|/tmp/peco\.tar\.gz"
  "https://github.com/projectdiscovery/httpx|^httpx_.+_linux_amd64\.zip$|/tmp/httpx\.zip"
  "https://github.com/sachaos/viddy|^viddy_.+_Linux_x86_64\.tar\.gz$|/tmp/viddy\.tar\.gz"
  "https://github.com/schollz/croc|^croc_.+_Linux-64bit\.tar\.gz$|/tmp/croc.tar.gz"
  "https://github.com/sharkdp/bat|^bat-v.+-x86_64-unknown-linux-gnu\.tar\.gz$|/tmp/bat\.tar\.gz"
  "https://github.com/sharkdp/fd|^fd-v.+-x86_64-unknown-linux-gnu\.tar\.gz$|/tmp/fd\.tar\.gz"
  "https://github.com/smallstep/cli|^step_linux_.+_amd64\.tar\.gz$|/tmp/step\.tar\.gz"
  "https://github.com/starship/starship|^starship-x86_64-unknown-linux-gnu\.tar\.gz$|/tmp/starship\.tar\.gz"
  "https://github.com/stern/stern|^stern_.+_linux_amd64\.tar\.gz$|/tmp/stern.tar.gz"
  "https://github.com/timvisee/ffsend|^ffsend-v.+-linux-x64-static$|/usr/bin/ffsend|755"
  "https://github.com/tomnomnom/gron|^gron-linux-amd64-.+\.tgz$|/tmp/gron\.tgz"
  "https://github.com/wader/fq|^fq_.+_linux_amd64\.tar\.gz$|/tmp/fq\.tar\.gz"
  "https://github.com/watchexec/watchexec|^watchexec-.+-x86_64-unknown-linux-musl\.tar\.xz$|/tmp/watchexec\.tar\.xz"
  "https://github.com/Wilfred/difftastic|^difft-x86_64-unknown-linux-gnu\.tar\.gz$|/tmp/difft\.tar\.gz"
)
for i in ${ASSETS[@]}; do
  REPO="$(echo "$i" | cut -d'|' -f1)"
  ASSET_REGEX="$(echo "$i" | cut -d'|' -f2)"
  OUTPUT_FILE="$(echo "$i" | cut -d'|' -f3)"
  OUTPUT_FILE_PERMS="$(echo "$i" | cut -d'|' -f4)"
  echo "" >&2
  echo "Downloading asset for $REPO..." >&2
  FETCH_DIR="$(mktemp -d)"
  /usr/local/bin/fetch --log-level warn \
    --repo="$REPO" \
    --tag=">=0.0.0" \
    --release-asset="$ASSET_REGEX" \
    "$FETCH_DIR"
  mv "$FETCH_DIR"/* "$OUTPUT_FILE"
  rm -rf "$FETCH_DIR"
  if [[ -f "$OUTPUT_FILE" ]]; then
    chmod "${OUTPUT_FILE_PERMS:-644}" "$OUTPUT_FILE"
    if [[ "$OUTPUT_FILE" == *.tar.gz ]] || [[ "$OUTPUT_FILE" == *.tgz ]]; then
      UNPACK_DIR="$(mktemp -d)"
      tar xzf "$OUTPUT_FILE" -C "$UNPACK_DIR"
    elif [[ "$OUTPUT_FILE" == *.tar.xz ]] || [[ "$OUTPUT_FILE" == *.xz ]]; then
      UNPACK_DIR="$(mktemp -d)"
      tar xJf "$OUTPUT_FILE" -C "$UNPACK_DIR" --strip-components 1
    elif [[ "$OUTPUT_FILE" == *.zip ]]; then
      UNPACK_DIR="$(mktemp -d)"
      unzip -q "$OUTPUT_FILE" -d "$UNPACK_DIR"
    fi
    if [[ -d "$UNPACK_DIR" ]]; then
      find "$UNPACK_DIR" -type f -exec file --mime-type "{}" \; | \
        grep -P ":\s+application/.*executable" | \
        cut -d: -f 1 | xargs -I XXX -r mv "XXX" /usr/local/bin/
      rm -rf "$UNPACK_DIR" "$OUTPUT_FILE"
    fi
  fi
done

# install virter
[[ -f /usr/local/bin/virter ]] && tee -a /etc/apparmor.d/local/abstractions/libvirt-qemu > /dev/null <<'EOT'
/var/lib/libvirt/images/* rwk,
# required for QEMU accessing UEFI nvram variables
/usr/share/OVMF/* rk,
owner /var/lib/libvirt/qemu/nvram/*_VARS.fd rwk,
owner /var/lib/libvirt/qemu/nvram/*_VARS.ms.fd rwk,
EOT

# kubectl
KUBECTL_URL="https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
curl -L -o "/usr/local/bin/kubectl" "$KUBECTL_URL"
chmod 755 "/usr/local/bin/kubectl"

# pcloud
PCLOUD_URL="https://filedn.com/lqGgqyaOApSjKzN216iPGQf/Software/Linux/pcloud"
curl -L -o "/usr/local/bin/pcloud" "$PCLOUD_URL"
chmod 755 "/usr/local/bin/pcloud"

# some fonts
mkdir -p /usr/local/share/fonts
pushd /usr/local/share/fonts >/dev/null 2>&1
for NERDFONT in DejaVuSansMono Hack LiberationMono Ubuntu UbuntuMono; do
  curl -L -o ./$NERDFONT.zip "https://github.com/ryanoasis/nerd-fonts/releases/latest/download/$NERDFONT.zip"
  unzip -o ./$NERDFONT.zip
done
popd >/dev/null 2>&1
rm -f /usr/local/share/fonts/*Nerd*Windows*.ttf /usr/local/share/fonts/*.zip /usr/local/share/fonts/*Nerd*.otf
chmod 755 /usr/local/share/fonts
chmod 644 /usr/local/share/fonts/*.*
fc-cache -f -v

# ensure executable permissions are set on files copied into /usr/local/bin/
chmod 755 /usr/local/bin/*